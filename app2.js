//Latitude is the Y axis, longitude is the X axis
let bigBorder = [];

let friscoCityLine = [
  [-96.9140486, 33.1448959],
  [-96.9141069, 33.1411239],
  [-96.9218828, 33.1411079],
  [-96.9227403, 33.1411061],
  [-96.9227866, 33.141106],
  [-96.9226685, 33.1339368],
  [-96.920673, 33.1339368],
  [-96.9207052, 33.1298668],
  [-96.9202331, 33.1306755],
  [-96.9194499, 33.130379],
  [-96.9174972, 33.1322477],
  [-96.9160329, 33.1306604],
  [-96.9123017, 33.131994],
  [-96.9116254, 33.1339352],
  [-96.9115563, 33.1341993],
  [-96.9112595, 33.1352289],
  [-96.9105632, 33.1308715],
  [-96.909029, 33.1314735],
  [-96.9061378, 33.1314329],
  [-96.9089435, 33.1294234],
  [-96.9058673, 33.1287348],
  [-96.9050593, 33.1286074],
  [-96.9050164, 33.1284816],
  [-96.9037182, 33.1284906],
  [-96.9024018, 33.1288605],
  [-96.9017012, 33.1291914],
  [-96.9006498, 33.1293531],
  [-96.9006422, 33.1299118],
  [-96.9000843, 33.130352],
  [-96.8998698, 33.1308551],
  [-96.8987561, 33.1309658],
  [-96.8983248, 33.1315155],
  [-96.8971146, 33.1319676],
  [-96.8970503, 33.1324663],
  [-96.8957574, 33.1328571],
  [-96.8956265, 33.1336224],
  [-96.8954334, 33.1339233],
  [-96.8950869, 33.1334905],
  [-96.8949452, 33.1339952],
  [-96.8945322, 33.1337976],
  [-96.8944356, 33.1329171],
  [-96.8950847, 33.1325263],
  [-96.8952403, 33.1319378],
  [-96.8951276, 33.1313538],
  [-96.8957338, 33.1311651],
  [-96.896753, 33.1298758],
  [-96.8978335, 33.1298203],
  [-96.8979783, 33.1296271],
  [-96.8981714, 33.1297529],
  [-96.8984267, 33.1296557],
  [-96.8983377, 33.1291959],
  [-96.8991027, 33.1289953],
  [-96.8988366, 33.1288679],
  [-96.8990973, 33.1283754],
  [-96.8989256, 33.1279082],
  [-96.898563, 33.1276325],
  [-96.8988022, 33.1269378],
  [-96.899167, 33.1269962],
  [-96.8993333, 33.1265829],
  [-96.8995264, 33.1270501],
  [-96.9001487, 33.1274634],
  [-96.9006583, 33.1275577],
  [-96.9014147, 33.1269602],
  [-96.9012645, 33.1261201],
  [-96.9008246, 33.1252486],
  [-96.9015564, 33.1253548],
  [-96.9017956, 33.1251857],
  [-96.9018224, 33.1244399],
  [-96.9023213, 33.124413],
  [-96.9023535, 33.1251542],
  [-96.902906, 33.1263133],
  [-96.9035498, 33.1263448],
  [-96.903729, 33.1260826],
  [-96.9035873, 33.1254732],
  [-96.9044295, 33.12621],
  [-96.9049655, 33.1261095],
  [-96.9047621, 33.1257787],
  [-96.9044402, 33.125608],
  [-96.9042681, 33.1243215],
  [-96.9038287, 33.1235773],
  [-96.9044939, 33.1240446],
  [-96.9047192, 33.123793],
  [-96.9047943, 33.1244579],
  [-96.9051693, 33.1245911],
  [-96.9051586, 33.1233601],
  [-96.9054871, 33.123789],
  [-96.9058904, 33.1237985],
  [-96.9054871, 33.123789],
  [-96.9051586, 33.1233601],
  [-96.9052298, 33.1204922],
  [-96.9052313, 33.1204307],
  [-96.9052343, 33.1203156],
  [-96.9053085, 33.1112777],
  [-96.9056978, 33.1112763],
  [-96.9066411, 33.1112021],
  [-96.9087015, 33.1085026],
  [-96.9139314, 33.1051603],
  [-96.9144512, 33.1004525],
  [-96.9116307, 33.1026217],
  [-96.9045022, 33.1096824],
  [-96.9012381, 33.1114777],
  [-96.8977774, 33.112087],
  [-96.8971088, 33.1113953],
  [-96.8964206, 33.1111318],
  [-96.8973448, 33.1102095],
  [-96.8985207, 33.1096505],
  [-96.8986815, 33.1093327],
  [-96.896926, 33.1096189],
  [-96.8926486, 33.1096458],
  [-96.8923112, 33.1077568],
  [-96.8871641, 33.1057297],
  [-96.8878779, 33.1057158],
  [-96.8885932, 33.105702],
  [-96.8896519, 33.103502],
  [-96.8846481, 33.102924],
  [-96.8850141, 33.101903],
  [-96.8850791, 33.101652],
  [-96.8850921, 33.101038],
  [-96.8850401, 33.100807],
  [-96.8848831, 33.100434],
  [-96.8847131, 33.100203],
  [-96.8838506, 33.0991747],
  [-96.8835371, 33.098801],
  [-96.8825041, 33.098823],
  [-96.8836671, 33.1014846],
  [-96.8835885, 33.1028253],
  [-96.8818431, 33.1025996],
  [-96.8816249, 33.1036519],
  [-96.881239, 33.1055144],
  [-96.8808193, 33.1055151],
  [-96.8801219, 33.1055162],
  [-96.8725397, 33.1055283],
  [-96.8691921, 33.1055337],
  [-96.8691987, 33.1082756],
  [-96.8606651, 33.1084339],
  [-96.8606332, 33.106299],
  [-96.8580041, 33.106302],
  [-96.8572771, 33.10636],
  [-96.8537399, 33.106357],
  [-96.8535841, 33.106356],
  [-96.8532101, 33.1063777],
  [-96.8538001, 33.1051644],
  [-96.8540469, 33.1045533],
  [-96.8543473, 33.103331],
  [-96.8566111, 33.0924826],
  [-96.8568042, 33.0914129],
  [-96.8567184, 33.0900646],
  [-96.8561068, 33.0858128],
  [-96.8560028, 33.0850787],
  [-96.8558327, 33.0838784],
  [-96.8554953, 33.0814979],
  [-96.8509999, 33.0835295],
  [-96.8501094, 33.0833767],
  [-96.8475322, 33.0841767],
  [-96.8150677, 33.093246],
  [-96.8125948, 33.0940443],
  [-96.7973355, 33.1004007],
  [-96.7328422, 33.1259416],
  [-96.7328553, 33.1259674],
  [-96.7328667, 33.1259904],
  [-96.7328877, 33.1260325],
  [-96.7328993, 33.1260544],
  [-96.7329001, 33.1260562],
  [-96.7329002, 33.1260564],
  [-96.732914, 33.1260766],
  [-96.7329241, 33.1261038],
  [-96.7329242, 33.126104],
  [-96.7329247, 33.1261055],
  [-96.7329382, 33.1261437],
  [-96.7329489, 33.1261769],
  [-96.7329585, 33.1262087],
  [-96.7329589, 33.1262099],
  [-96.7329594, 33.126212],
  [-96.732968, 33.1262431],
  [-96.7329774, 33.1262804],
  [-96.732978, 33.1262828],
  [-96.7329782, 33.1262835],
  [-96.7329847, 33.1263093],
  [-96.7329921, 33.1263438],
  [-96.7329979, 33.1263762],
  [-96.732998, 33.1263769],
  [-96.7329981, 33.1263772],
  [-96.7330039, 33.1264099],
  [-96.7330115, 33.1264772],
  [-96.7330116, 33.1264779],
  [-96.7330351, 33.1266866],
  [-96.733041, 33.1267541],
  [-96.7330491, 33.1268463],
  [-96.7330589, 33.1270072],
  [-96.7330655, 33.1271668],
  [-96.7330697, 33.1273277],
  [-96.7330694, 33.1273813],
  [-96.7330698, 33.1274871],
  [-96.7330125, 33.128114],
  [-96.732881, 33.130273],
  [-96.7328122, 33.1310735],
  [-96.732767, 33.1317948],
  [-96.7327398, 33.1323192],
  [-96.7327229, 33.1328493],
  [-96.7327201, 33.1330006],
  [-96.732718, 33.133111],
  [-96.7327223, 33.133186],
  [-96.7327242, 33.1336187],
  [-96.7327334, 33.1341567],
  [-96.7327433, 33.1343753],
  [-96.7327595, 33.1346915],
  [-96.7327798, 33.1350368],
  [-96.7328534, 33.1360355],
  [-96.7328955, 33.1365778],
  [-96.7329046, 33.1366948],
  [-96.7329508, 33.1372894],
  [-96.7329601, 33.1374173],
  [-96.7330072, 33.1377502],
  [-96.7330201, 33.1378418],
  [-96.733048, 33.1385317],
  [-96.7330594, 33.1388458],
  [-96.7330561, 33.1390244],
  [-96.7330542, 33.1391115],
  [-96.7330542, 33.1391125],
  [-96.7330535, 33.1391514],
  [-96.7330525, 33.1392317],
  [-96.7330511, 33.1393409],
  [-96.73305, 33.1394257],
  [-96.7330526, 33.1394262],
  [-96.7330455, 33.1397505],
  [-96.7330425, 33.1399674],
  [-96.7330338, 33.140594],
  [-96.7330297, 33.1408838],
  [-96.7330204, 33.1415527],
  [-96.7330178, 33.1417356],
  [-96.7330107, 33.14225],
  [-96.7330069, 33.1425362],
  [-96.7329963, 33.1433476],
  [-96.7329901, 33.1438269],
  [-96.732984, 33.1442907],
  [-96.7329784, 33.1447259],
  [-96.7329788, 33.1450529],
  [-96.7329675, 33.1459585],
  [-96.7329636, 33.146264],
  [-96.7329592, 33.1466207],
  [-96.7329546, 33.1469841],
  [-96.7329528, 33.1471269],
  [-96.7329432, 33.1478949],
  [-96.7329401, 33.1481175],
  [-96.7329285, 33.1483417],
  [-96.7329244, 33.1483951],
  [-96.7329161, 33.1485929],
  [-96.7329207, 33.1489106],
  [-96.732925, 33.14978],
  [-96.7329197, 33.1503175],
  [-96.7329099, 33.1503175],
  [-96.7328549, 33.1507395],
  [-96.7328513, 33.1507997],
  [-96.7328457, 33.151246],
  [-96.7328391, 33.1517879],
  [-96.7328936, 33.1523107],
  [-96.7328898, 33.1525265],
  [-96.7328885, 33.1526356],
  [-96.7328872, 33.1527473],
  [-96.7328838, 33.152925],
  [-96.7328851, 33.1531219],
  [-96.7328726, 33.1543036],
  [-96.7328384, 33.1563813],
  [-96.7328357, 33.156516],
  [-96.732809, 33.158176],
  [-96.7327954, 33.1589771],
  [-96.7327879, 33.1594613],
  [-96.7327843, 33.160362],
  [-96.7327813, 33.1612362],
  [-96.7327608, 33.161472],
  [-96.7327799, 33.1616174],
  [-96.7327765, 33.1626767],
  [-96.7327726, 33.1637515],
  [-96.732771, 33.1642354],
  [-96.732769, 33.1648442],
  [-96.7327666, 33.1654819],
  [-96.7327655, 33.1657986],
  [-96.7327651, 33.1659079],
  [-96.732764, 33.1662271],
  [-96.7327614, 33.1669212],
  [-96.7327602, 33.1669212],
  [-96.7327525, 33.1673678],
  [-96.7327481, 33.1675862],
  [-96.7327304, 33.1684354],
  [-96.7327235, 33.168863],
  [-96.7327209, 33.1690578],
  [-96.7327118, 33.1697691],
  [-96.7327019, 33.1710805],
  [-96.7327027, 33.1714206],
  [-96.7327034, 33.1717841],
  [-96.7327038, 33.172004],
  [-96.7327048, 33.1724596],
  [-96.7327416, 33.1731305],
  [-96.7327443, 33.1731813],
  [-96.7327431, 33.173474],
  [-96.7327392, 33.173726],
  [-96.7327358, 33.1739467],
  [-96.7327334, 33.1741343],
  [-96.7327331, 33.1741781],
  [-96.7327331, 33.1741808],
  [-96.7327329, 33.1741808],
  [-96.7327327, 33.1741852],
  [-96.732731, 33.1743227],
  [-96.7327308, 33.174343],
  [-96.7327319, 33.174343],
  [-96.7327315, 33.1743705],
  [-96.7327305, 33.1743705],
  [-96.732699, 33.1760514],
  [-96.73265, 33.1760531],
  [-96.732641, 33.1764391],
  [-96.732616, 33.1775242],
  [-96.7326103, 33.1777649],
  [-96.732601, 33.1781484],
  [-96.7325828, 33.1789308],
  [-96.732567, 33.1797629],
  [-96.7325688, 33.180642],
  [-96.7326139, 33.1816111],
  [-96.7326152, 33.1816521],
  [-96.7326493, 33.1820358],
  [-96.7326705, 33.1823285],
  [-96.7326762, 33.1825759],
  [-96.7326818, 33.1828235],
  [-96.7326922, 33.1832765],
  [-96.7326959, 33.1836111],
  [-96.732694, 33.18397],
  [-96.7326916, 33.1843981],
  [-96.7326958, 33.1846792],
  [-96.732702, 33.1849446],
  [-96.7327105, 33.1853143],
  [-96.7415435, 33.1853952],
  [-96.7415379, 33.1852214],
  [-96.7415665, 33.1827216],
  [-96.7415789, 33.1816467],
  [-96.741579, 33.1816417],
  [-96.7433604, 33.1816476],
  [-96.7499562, 33.1816695],
  [-96.7502175, 33.1816704],
  [-96.7501983, 33.1821841],
  [-96.7503881, 33.1821857],
  [-96.7505033, 33.1821872],
  [-96.7505248, 33.1821877],
  [-96.750687, 33.1821917],
  [-96.7507764, 33.1821925],
  [-96.750865, 33.1821947],
  [-96.7510065, 33.1821982],
  [-96.7511834, 33.1822002],
  [-96.751197, 33.1822003],
  [-96.7513349, 33.1822023],
  [-96.7514978, 33.1822038],
  [-96.7515036, 33.1822039],
  [-96.7515627, 33.1822044],
  [-96.7516517, 33.1822053],
  [-96.7516642, 33.1822054],
  [-96.7518298, 33.1822077],
  [-96.7519666, 33.1822108],
  [-96.751989, 33.1822122],
  [-96.7521309, 33.1822134],
  [-96.7522365, 33.1822168],
  [-96.7522972, 33.1822187],
  [-96.7523255, 33.1822187],
  [-96.7524146, 33.1822188],
  [-96.7524637, 33.1822188],
  [-96.7526286, 33.1822194],
  [-96.7529118, 33.1822228],
  [-96.7530219, 33.1822239],
  [-96.7531067, 33.1822247],
  [-96.7531871, 33.182226],
  [-96.7531882, 33.182226],
  [-96.7532192, 33.1822265],
  [-96.7574408, 33.1822984],
  [-96.7574298, 33.1818568],
  [-96.7579717, 33.1818624],
  [-96.7676591, 33.181977],
  [-96.7679042, 33.1819799],
  [-96.767843, 33.1891447],
  [-96.7678431, 33.1891451],
  [-96.7625032, 33.1890805],
  [-96.7625012, 33.1892948],
  [-96.7624357, 33.1964354],
  [-96.7675303, 33.1965229],
  [-96.7678004, 33.1965275],
  [-96.7676741, 33.2037235],
  [-96.7697695, 33.203763],
  [-96.7707455, 33.2037584],
  [-96.7822192, 33.2038889],
  [-96.7851591, 33.2039239],
  [-96.785302, 33.203924],
  [-96.7852699, 33.1929533],
  [-96.7938958, 33.1930161],
  [-96.7939978, 33.1966432],
  [-96.7896526, 33.1965894],
  [-96.7895989, 33.203915],
  [-96.793928, 33.2040137],
  [-96.7939924, 33.2115721],
  [-96.7784063, 33.2113961],
  [-96.7741333, 33.2113477],
  [-96.7740904, 33.2122005],
  [-96.7710112, 33.2121535],
  [-96.7678721, 33.2121055],
  [-96.7676288, 33.2121017],
  [-96.7676315, 33.2165496],
  [-96.7676274, 33.2166732],
  [-96.7675864, 33.218266],
  [-96.7674413, 33.2182668],
  [-96.7674109, 33.2182902],
  [-96.7672854, 33.2183872],
  [-96.7672542, 33.2184113],
  [-96.7671066, 33.218468],
  [-96.7670677, 33.2184719],
  [-96.7668721, 33.2184914],
  [-96.7668428, 33.2184943],
  [-96.7611897, 33.2184401],
  [-96.7561572, 33.2183918],
  [-96.7554326, 33.2183849],
  [-96.7554325, 33.218165],
  [-96.7554324, 33.2180575],
  [-96.7554668, 33.2132241],
  [-96.7554825, 33.2110239],
  [-96.7554844, 33.210752],
  [-96.7554844, 33.210747],
  [-96.7554797, 33.2107469],
  [-96.7554771, 33.2107469],
  [-96.7542344, 33.2107474],
  [-96.7538011, 33.2107468],
  [-96.7537477, 33.2107467],
  [-96.7533588, 33.2107461],
  [-96.7531494, 33.2107467],
  [-96.7529501, 33.2107473],
  [-96.7526001, 33.2107467],
  [-96.7525045, 33.2107466],
  [-96.7520713, 33.2107459],
  [-96.752052, 33.2116327],
  [-96.7517248, 33.2116327],
  [-96.7514941, 33.2117449],
  [-96.7513547, 33.2119065],
  [-96.7503094, 33.2118993],
  [-96.7503088, 33.2119309],
  [-96.7503072, 33.2121246],
  [-96.7503033, 33.2183853],
  [-96.7503034, 33.218395],
  [-96.7503031, 33.2184099],
  [-96.766315, 33.2190125],
  [-96.7791888, 33.2190529],
  [-96.7912294, 33.2191478],
  [-96.7998835, 33.2191995],
  [-96.8036285, 33.219183],
  [-96.8127293, 33.2193408],
  [-96.8279727, 33.219463],
  [-96.8387089, 33.2195779],
  [-96.838737, 33.2145455],
  [-96.8321307, 33.2146083],
  [-96.8320959, 33.2108563],
  [-96.829757, 33.2107665],
  [-96.8297784, 33.2053625],
  [-96.8421595, 33.20556],
  [-96.8420093, 33.2110358],
  [-96.8455498, 33.2110717],
  [-96.8455695, 33.2141833],
  [-96.8455706, 33.2143449],
  [-96.8455713, 33.2144467],
  [-96.8420951, 33.2144288],
  [-96.8420263, 33.2195594],
  [-96.845592, 33.2195447],
  [-96.8483714, 33.2195333],
  [-96.8720128, 33.2193584],
  [-96.8799483, 33.2192926],
  [-96.8877558, 33.2195009],
  [-96.8877672, 33.2189626],
  [-96.8877721, 33.2187338],
  [-96.8877702, 33.2184314],
  [-96.8878147, 33.2182587],
  [-96.8885916, 33.2170079],
  [-96.8888578, 33.2166956],
  [-96.8893091, 33.2162882],
  [-96.889791, 33.2159389],
  [-96.8911666, 33.2152246],
  [-96.8918066, 33.2147669],
  [-96.8923721, 33.2142211],
  [-96.8923496, 33.2138749],
  [-96.892985, 33.2133407],
  [-96.8933969, 33.2130003],
  [-96.8937187, 33.2127819],
  [-96.8942491, 33.2125131],
  [-96.8948697, 33.2122657],
  [-96.8950762, 33.2121864],
  [-96.8952968, 33.21206],
  [-96.8955196, 33.2118609],
  [-96.8959913, 33.2113851],
  [-96.887697, 33.2112416],
  [-96.8878082, 33.2059406],
  [-96.887824, 33.205188],
  [-96.8871507, 33.2059645],
  [-96.8870381, 33.2058882],
  [-96.8870434, 33.2053473],
  [-96.8874404, 33.2050511],
  [-96.887824, 33.2049725],
  [-96.887824, 33.2039873],
  [-96.8854828, 33.2039702],
  [-96.8840564, 33.2039597],
  [-96.8807807, 33.2039357],
  [-96.880464, 33.2039334],
  [-96.880464, 33.2028831],
  [-96.8806893, 33.2019495],
  [-96.8810755, 33.2010697],
  [-96.886397, 33.1916878],
  [-96.8867189, 33.1910593],
  [-96.8868986, 33.1905543],
  [-96.8869818, 33.1900088],
  [-96.8870408, 33.1891918],
  [-96.8870846, 33.186863],
  [-96.887191, 33.1821545],
  [-96.8872139, 33.1808565],
  [-96.8873654, 33.1783308],
  [-96.8819671, 33.1782797],
  [-96.8819687, 33.1781268],
  [-96.882062, 33.1694448],
  [-96.8820791, 33.1671815],
  [-96.8821107, 33.1630261],
  [-96.8865238, 33.1632059],
  [-96.8865984, 33.1587777],
  [-96.8908194, 33.1586341],
  [-96.8910091, 33.1514434],
  [-96.8977797, 33.1515375],
  [-96.897783, 33.1465509],
  [-96.8986494, 33.146542],
  [-96.8986416, 33.1515293],
  [-96.8995521, 33.1515314],
  [-96.8995451, 33.1546044],
  [-96.9118232, 33.1545975],
  [-96.9118251, 33.1494429],
  [-96.9118191, 33.1480839],
  [-96.9118141, 33.1467499],
  [-96.914023, 33.1467745],
  [-96.9140486, 33.1448959],
];

let friscoIsdLine = [
  [-96.900654, 33.124557],
  [-96.900686, 33.124562],
  [-96.900628, 33.124173],
  [-96.900615, 33.124099],
  [-96.900655, 33.124045],
  [-96.900854, 33.123785],
  [-96.901111, 33.123602],
  [-96.901426, 33.123449],
  [-96.901027, 33.12253],
  [-96.900041, 33.121468],
  [-96.900839, 33.120808],
  [-96.900876, 33.120152],
  [-96.900873, 33.120115],
  [-96.89962, 33.120095],
  [-96.896688, 33.120043],
  [-96.896754, 33.114705],
  [-96.896776, 33.112921],
  [-96.896792, 33.111601],
  [-96.896812, 33.110014],
  [-96.892052, 33.109962],
  [-96.892058, 33.110892],
  [-96.892065, 33.112681],
  [-96.889592, 33.112663],
  [-96.889534, 33.112665],
  [-96.889332, 33.1127],
  [-96.889276, 33.112718],
  [-96.889168, 33.112764],
  [-96.888876, 33.112928],
  [-96.88841, 33.112338],
  [-96.888335, 33.112287],
  [-96.888305, 33.112279],
  [-96.888213, 33.112287],
  [-96.888161, 33.112315],
  [-96.887877, 33.112557],
  [-96.887488, 33.112199],
  [-96.887189, 33.112448],
  [-96.887148, 33.112507],
  [-96.887028, 33.112507],
  [-96.884249, 33.112471],
  [-96.884196, 33.115231],
  [-96.883959, 33.115244],
  [-96.883979, 33.115689],
  [-96.883814, 33.115725],
  [-96.883647, 33.11576],
  [-96.88349, 33.115817],
  [-96.883358, 33.115907],
  [-96.883229, 33.116035],
  [-96.88274, 33.11576],
  [-96.882534, 33.11608],
  [-96.882036, 33.116029],
  [-96.869189, 33.115954],
  [-96.869215, 33.114512],
  [-96.869203, 33.114512],
  [-96.869196, 33.11441],
  [-96.865225, 33.114359],
  [-96.864715, 33.114318],
  [-96.864397, 33.114079],
  [-96.864285, 33.114232],
  [-96.863782, 33.114074],
  [-96.863703, 33.114288],
  [-96.862954, 33.114067],
  [-96.862818, 33.11441],
  [-96.862732, 33.114395],
  [-96.862397, 33.114331],
  [-96.86209, 33.114324],
  [-96.862083, 33.114173],
  [-96.861093, 33.114169],
  [-96.861088, 33.114252],
  [-96.860553, 33.114245],
  [-96.860556, 33.114305],
  [-96.860586, 33.115016],
  [-96.851421, 33.114945],
  [-96.848668, 33.114976],
  [-96.84407, 33.114988],
  [-96.843423, 33.114975],
  [-96.843317, 33.114888],
  [-96.841683, 33.114864],
  [-96.841595, 33.114862],
  [-96.841676, 33.110541],
  [-96.841753, 33.109751],
  [-96.841699, 33.108485],
  [-96.841578, 33.107312],
  [-96.841527, 33.106808],
  [-96.841578, 33.106795],
  [-96.841912, 33.097652],
  [-96.841833, 33.09644],
  [-96.841887, 33.094308],
  [-96.841622, 33.093865],
  [-96.841905, 33.093633],
  [-96.842007, 33.08984],
  [-96.842206, 33.089607],
  [-96.842372, 33.089413],
  [-96.842493, 33.083046],
  [-96.842393, 33.083047],
  [-96.832094, 33.082897],
  [-96.832051, 33.084258],
  [-96.828865, 33.084247],
  [-96.826694, 33.084284],
  [-96.825808, 33.084239],
  [-96.824626, 33.084189],
  [-96.823998, 33.084148],
  [-96.821559, 33.084141],
  [-96.821518, 33.080997],
  [-96.805143, 33.080958],
  [-96.804589, 33.080928],
  [-96.802556, 33.080903],
  [-96.799231, 33.080864],
  [-96.798083, 33.080828],
  [-96.782598, 33.080786],
  [-96.782621, 33.079791],
  [-96.779848, 33.079809],
  [-96.779816, 33.086156],
  [-96.779735, 33.095775],
  [-96.771833, 33.095712],
  [-96.771594, 33.095771],
  [-96.771529, 33.101101],
  [-96.733454, 33.100827],
  [-96.733448, 33.1059],
  [-96.733445, 33.110847],
  [-96.733372, 33.115638],
  [-96.733376, 33.117076],
  [-96.733653, 33.117481],
  [-96.734405, 33.118519],
  [-96.734473, 33.11862],
  [-96.734593, 33.118796],
  [-96.734986, 33.119535],
  [-96.735066, 33.119987],
  [-96.735062, 33.120051],
  [-96.735059, 33.120115],
  [-96.735057, 33.120178],
  [-96.735056, 33.120242],
  [-96.735055, 33.120306],
  [-96.735055, 33.12037],
  [-96.735055, 33.120433],
  [-96.735056, 33.120497],
  [-96.735058, 33.120561],
  [-96.735061, 33.120624],
  [-96.735064, 33.120688],
  [-96.735067, 33.120752],
  [-96.735072, 33.120815],
  [-96.735069, 33.120874],
  [-96.735067, 33.120932],
  [-96.735066, 33.120991],
  [-96.735065, 33.12105],
  [-96.735065, 33.121108],
  [-96.735066, 33.121167],
  [-96.735067, 33.121225],
  [-96.735069, 33.121284],
  [-96.735072, 33.121342],
  [-96.735075, 33.121401],
  [-96.735079, 33.121459],
  [-96.735084, 33.121518],
  [-96.735089, 33.121576],
  [-96.735096, 33.121634],
  [-96.735102, 33.121693],
  [-96.735259, 33.122476],
  [-96.735271, 33.122541],
  [-96.735347, 33.122754],
  [-96.735575, 33.123398],
  [-96.735877, 33.124076],
  [-96.732672, 33.125149],
  [-96.715816, 33.13119],
  [-96.715787, 33.13487],
  [-96.715932, 33.134876],
  [-96.719098, 33.134882],
  [-96.718737, 33.137623],
  [-96.715753, 33.139089],
  [-96.715706, 33.144953],
  [-96.69837, 33.144749],
  [-96.698301, 33.144754],
  [-96.696521, 33.144877],
  [-96.695735, 33.145037],
  [-96.694401, 33.145538],
  [-96.695418, 33.147322],
  [-96.696512, 33.148601],
  [-96.697146, 33.149187],
  [-96.698213, 33.150001],
  [-96.698601, 33.150282],
  [-96.6982, 33.150806],
  [-96.698181, 33.152434],
  [-96.698501, 33.152655],
  [-96.698184, 33.153176],
  [-96.697121, 33.154918],
  [-96.698192, 33.155361],
  [-96.698207, 33.159074],
  [-96.698274, 33.166653],
  [-96.698271, 33.16728],
  [-96.698268, 33.168082],
  [-96.698268, 33.168176],
  [-96.698282, 33.169694],
  [-96.698302, 33.169974],
  [-96.698303, 33.173489],
  [-96.698303, 33.174164],
  [-96.708086, 33.174209],
  [-96.708115, 33.173604],
  [-96.708824, 33.173571],
  [-96.708838, 33.172108],
  [-96.711558, 33.172126],
  [-96.711561, 33.172312],
  [-96.715589, 33.172356],
  [-96.715717, 33.172353],
  [-96.715667, 33.174243],
  [-96.719009, 33.174322],
  [-96.720395, 33.17457],
  [-96.722061, 33.175053],
  [-96.723004, 33.173462],
  [-96.724067, 33.171518],
  [-96.725172, 33.17051],
  [-96.726283, 33.169807],
  [-96.727784, 33.169177],
  [-96.729309, 33.168824],
  [-96.730991, 33.168644],
  [-96.732961, 33.168759],
  [-96.732932, 33.174318],
  [-96.732937, 33.189088],
  [-96.733097, 33.203528],
  [-96.746615, 33.203551],
  [-96.746536, 33.196286],
  [-96.750733, 33.196263],
  [-96.752748, 33.196446],
  [-96.75342, 33.196871],
  [-96.753641, 33.196698],
  [-96.753737, 33.196675],
  [-96.753828, 33.196717],
  [-96.753891, 33.196653],
  [-96.754224, 33.19634],
  [-96.754372, 33.196234],
  [-96.754559, 33.196119],
  [-96.754991, 33.195892],
  [-96.755465, 33.195718],
  [-96.755989, 33.195604],
  [-96.756453, 33.195559],
  [-96.756968, 33.195557],
  [-96.758466, 33.195559],
  [-96.758949, 33.195495],
  [-96.760625, 33.195449],
  [-96.76073, 33.195838],
  [-96.760874, 33.196093],
  [-96.76091, 33.196141],
  [-96.76117, 33.1964],
  [-96.761194, 33.196416],
  [-96.761546, 33.196649],
  [-96.762167, 33.196886],
  [-96.762418, 33.196429],
  [-96.767796, 33.196544],
  [-96.767777, 33.196419],
  [-96.767843, 33.19111],
  [-96.767827, 33.189097],
  [-96.77659, 33.189154],
  [-96.785183, 33.189222],
  [-96.78877, 33.189331],
  [-96.793845, 33.189358],
  [-96.794612, 33.189574],
  [-96.80279, 33.18967],
  [-96.802828, 33.196806],
  [-96.817338, 33.196702],
  [-96.818444, 33.196713],
  [-96.819902, 33.196784],
  [-96.820102, 33.196647],
  [-96.820203, 33.196382],
  [-96.820447, 33.196263],
  [-96.821045, 33.196247],
  [-96.82277, 33.196265],
  [-96.823121, 33.196254],
  [-96.825834, 33.196296],
  [-96.827164, 33.1964],
  [-96.828498, 33.196338],
  [-96.829632, 33.196355],
  [-96.834548, 33.196485],
  [-96.839315, 33.196408],
  [-96.838832, 33.219215],
  [-96.854515, 33.219252],
  [-96.880263, 33.219054],
  [-96.889714, 33.219324],
  [-96.889716, 33.219309],
  [-96.889773, 33.219176],
  [-96.889883, 33.219031],
  [-96.891577, 33.216791],
  [-96.89175, 33.216793],
  [-96.89186, 33.216185],
  [-96.894003, 33.213661],
  [-96.896435, 33.212238],
  [-96.897384, 33.212251],
  [-96.897599, 33.212253],
  [-96.898817, 33.211804],
  [-96.899768, 33.210792],
  [-96.899893, 33.210658],
  [-96.904069, 33.210712],
  [-96.904323, 33.203843],
  [-96.90464, 33.194107],
  [-96.905106, 33.194096],
  [-96.905185, 33.191819],
  [-96.904727, 33.191815],
  [-96.904302, 33.191812],
  [-96.902939, 33.190281],
  [-96.902441, 33.189929],
  [-96.902525, 33.189502],
  [-96.90252, 33.189497],
  [-96.902186, 33.189136],
  [-96.902018, 33.189202],
  [-96.901658, 33.18888],
  [-96.901062, 33.188448],
  [-96.900183, 33.187905],
  [-96.900573, 33.187341],
  [-96.900721, 33.187039],
  [-96.901057, 33.186329],
  [-96.901187, 33.185871],
  [-96.901423, 33.185108],
  [-96.901545, 33.184327],
  [-96.9015, 33.180339],
  [-96.900265, 33.180375],
  [-96.892923, 33.180281],
  [-96.892341, 33.18004],
  [-96.891821, 33.179779],
  [-96.891591, 33.179551],
  [-96.891358, 33.179564],
  [-96.887485, 33.179514],
  [-96.88727, 33.1795],
  [-96.887291, 33.178395],
  [-96.887489, 33.17629],
  [-96.887533, 33.171929],
  [-96.887593, 33.169312],
  [-96.889483, 33.169343],
  [-96.898399, 33.169486],
  [-96.899313, 33.169262],
  [-96.900917, 33.168617],
  [-96.901466, 33.168414],
  [-96.901374, 33.167019],
  [-96.901276, 33.165524],
  [-96.901321, 33.163448],
  [-96.901385, 33.162712],
  [-96.901431, 33.162183],
  [-96.901472, 33.16054],
  [-96.901454, 33.160509],
  [-96.900803, 33.160074],
  [-96.90081, 33.159659],
  [-96.899549, 33.159634],
  [-96.899498, 33.159636],
  [-96.89944, 33.159222],
  [-96.899428, 33.15835],
  [-96.89953, 33.154823],
  [-96.899489, 33.151451],
  [-96.899537, 33.146707],
  [-96.899593, 33.146566],
  [-96.899675, 33.139401],
  [-96.899663, 33.139332],
  [-96.900386, 33.139317],
  [-96.900396, 33.139322],
  [-96.900561, 33.139322],
  [-96.900561, 33.139316],
  [-96.900769, 33.139298],
  [-96.900759, 33.138394],
  [-96.900702, 33.138022],
  [-96.900601, 33.13786],
  [-96.900625, 33.136955],
  [-96.900588, 33.133316],
  [-96.900581, 33.133288],
  [-96.900583, 33.132579],
  [-96.90085, 33.132333],
  [-96.900653, 33.132192],
  [-96.900533, 33.132088],
  [-96.900644, 33.131856],
  [-96.901016, 33.131381],
  [-96.900596, 33.131117],
  [-96.900709, 33.124753],
  [-96.900654, 33.12455],
];

let collinCountyLine = [
  [-96.8440326, 32.9874419],
  [-96.8411071, 33.1334196],
  [-96.8377691, 33.2673221],
  [-96.837491, 33.2784717],
  [-96.8359446, 33.338841],
  [-96.8351626, 33.3674819],
  [-96.83515, 33.3679794],
  [-96.8351387, 33.368357],
  [-96.8347198, 33.3823495],
  [-96.8346543, 33.3858585],
  [-96.834612, 33.3865511],
  [-96.8341006, 33.4054665],
  [-96.8328591, 33.4054253],
  [-96.8254862, 33.4051808],
  [-96.8082787, 33.404718],
  [-96.8066428, 33.404674],
  [-96.8049898, 33.4046322],
  [-96.8013973, 33.4045413],
  [-96.7997575, 33.4044998],
  [-96.7984993, 33.404468],
  [-96.7977898, 33.40445],
  [-96.7964065, 33.404415],
  [-96.7961439, 33.4044084],
  [-96.7945585, 33.4043683],
  [-96.7942328, 33.40436],
  [-96.7898149, 33.4042385],
  [-96.7721674, 33.4038408],
  [-96.7618531, 33.4036536],
  [-96.7617392, 33.4036511],
  [-96.75961, 33.403609],
  [-96.7568971, 33.4035467],
  [-96.7536924, 33.4034731],
  [-96.750527, 33.4034004],
  [-96.7495432, 33.4033779],
  [-96.7486989, 33.4033585],
  [-96.7475401, 33.4033319],
  [-96.747163, 33.4033232],
  [-96.7461576, 33.4033001],
  [-96.7407951, 33.4031769],
  [-96.6803513, 33.4018866],
  [-96.6389324, 33.4009808],
  [-96.6269187, 33.4007069],
  [-96.5898358, 33.400231],
  [-96.5858895, 33.4001744],
  [-96.5826411, 33.4001996],
  [-96.580845, 33.4001502],
  [-96.5798045, 33.4001178],
  [-96.5780137, 33.4000908],
  [-96.5758036, 33.4000107],
  [-96.5754403, 33.4000012],
  [-96.5726923, 33.3999298],
  [-96.5694288, 33.3999445],
  [-96.5665098, 33.3998933],
  [-96.564582, 33.3998575],
  [-96.5214718, 33.3993083],
  [-96.3845405, 33.3978854],
  [-96.3845319, 33.396767],
  [-96.3843657, 33.3410621],
  [-96.3766982, 33.3420148],
  [-96.3765934, 33.342028],
  [-96.3605485, 33.3440218],
  [-96.3044374, 33.350733],
  [-96.2954857, 33.3519187],
  [-96.29535, 33.2288258],
  [-96.2963508, 33.0762841],
  [-96.2973941, 32.981502],
  [-96.4707339, 32.9822019],
  [-96.5168819, 32.9823881],
  [-96.6565817, 32.9846796],
  [-96.6588612, 32.9846716],
  [-96.6610172, 32.9847043],
  [-96.6625267, 32.9847262],
  [-96.8440326, 32.9874419],
];

let dentonCountyLine = [
  [-97.3984766, 32.9912804],
  [-97.209785, 32.9909658],
  [-97.1673649, 32.9906221],
  [-97.1580892, 32.9905468],
  [-97.1386585, 32.9904025],
  [-97.0595206, 32.9902896],
  [-97.0326646, 32.9899027],
  [-96.94135, 32.9887733],
  [-96.8440326, 32.9874419],
  [-96.8411071, 33.1334196],
  [-96.8377691, 33.2673221],
  [-96.837491, 33.2784717],
  [-96.8359446, 33.338841],
  [-96.8351626, 33.3674819],
  [-96.83515, 33.3679794],
  [-96.8351387, 33.368357],
  [-96.8347198, 33.3823495],
  [-96.8346543, 33.3858585],
  [-96.834612, 33.3865511],
  [-96.8341006, 33.4054665],
  [-96.8347675, 33.405494],
  [-96.8349344, 33.4053552],
  [-96.8413841, 33.4055297],
  [-96.8413679, 33.4134682],
  [-96.8793426, 33.4143431],
  [-96.9438023, 33.4162159],
  [-97.1147441, 33.4221741],
  [-97.2533604, 33.4261893],
  [-97.2893595, 33.4273926],
  [-97.3830823, 33.4304326],
  [-97.3892155, 33.2842387],
  [-97.3905391, 33.250125],
  [-97.3940008, 33.1376599],
  [-97.3984766, 32.9912804],
];

let unknown = [
  [-96.8884161, 33.2168349],
  [-96.8873545, 33.2167846],
  [-96.8881921, 33.2171588],
  [-96.8884161, 33.2168349],
];

fetch("border.json")
  .then((response) => response.json())
  .then((json) => (bigBorder = json));

let coords = [];

const submitButton = document.getElementById("checkLoc");
const submitAddress = document.getElementById("checkAddress");
const domGoogle = document.getElementById("dom-google");
const domX = document.getElementById("dom-x");
const domY = document.getElementById("dom-y");
const domResult = document.getElementById("dom-result");
const domAddress = document.getElementById("dom-address");

const originInput = document.getElementById("dom-address");
const autocompleteArea = document.getElementById("autocomplete-area");

function debounce(func, timeout = 500) {
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => {
      func.apply(this, args);
    }, timeout);
  };
}

const processAutocomplete = debounce(() => getAutoComplete(originInput.value));

submitAddress.addEventListener("mouseup", (e) => {
  getGeocoding();
});

submitButton.addEventListener("mouseup", (e) => {
  const splitCoords = (x) => {
    console.log(x);
    chunks = x.split(", ");
    console.log(chunks);
    let verdict = checkInside(bigBorder, 366, [chunks[1], chunks[0]]);
    console.log(verdict);
    if (verdict) {
      domResult.innerHTML = "<p class='bg-green-500 text-white'>This is within Frisco ISD</p>";
    } else {
      domResult.innerHTML = "<p class='bg-red-500 text-white'>This is NOT within Frisco ISD</p>";
    }
  };

  splitCoords(domGoogle.value);
  // ;
});

let data2 = "";
let searching = true;

async function getAutoComplete(x) {
  console.log("running");
  let center = "-96.7968387,33.1245701";
  if (x.length >= 4) {
    const result = await fetch(
      `http://www.mapquestapi.com/search/v3/prediction?key=DG7dUj3P9PxuGIBmXvepfTFtoGplRqAp&limit=5&collection=address&q=${x}&location=${encodeURI(
        center
      )}`
    )
      .then((response) => (res = response.json()))
      .then((data) => buildEvents(data));

    function buildEvents(x) {
      let arr = x.results;
      console.log(arr);

      autocompleteArea.innerHTML = arr
        .map((x) => `<button class="locationResults" value="${x.displayString}">${x.displayString}</button>`)
        .join("");

      let dropDowns = document.getElementsByClassName("locationResults");
      console.log(dropDowns);
      // console.log(dropDowns);
      for (const ele of dropDowns) {
        // console.log(ele.innerText);
        ele.addEventListener("click", (e) => {
          console.log(e.target.value);
          domAddress.value = e.target.value;
          getGeocoding();
          autocompleteArea.innerHTML = "";

          e.preventDefault();
        });
      }
    }
  }
}

function selectAddress() {}

originInput.addEventListener("keyup", () => {
  searching = true;
  processAutocomplete();
});

async function getGeocoding() {
  let query = encodeURI(domAddress.value);
  let data = null;
  console.log("calling");
  const result = await fetch(
    `https://maps.googleapis.com/maps/api/geocode/json?address=${query}&key=AIzaSyBMobqGzdmYFvsxeZJ3YunRull6NYefekM`
  ).then((response) => (res = response.json()));
  console.log(result.results[0]);
  domAddress.value = result.results[0].formatted_address;
  let latlng = `${result.results[0].geometry.location.lat}, ${result.results[0].geometry.location.lng}`;
  console.log(latlng);
  domGoogle.value = latlng;

  let verdict = checkInside(bigBorder, [
    result.results[0].geometry.location.lng,
    result.results[0].geometry.location.lat,
  ]);
  if (verdict) {
    // domResult.innerText = "This is within Frisco ISD";
    domResult.innerHTML = "<p class='px-2 bg-green-500 text-white'>This is within Frisco ISD</p>";
  } else {
    // domResult.innerText = "This is outside Frisco ISD";
    domResult.innerHTML = "<p class='px-2 bg-red-500 text-white'>This is NOT within Frisco ISD</p>";
  }

  initMap(result.results[0].geometry.location);
}

function nestedArrayToObjects(x) {
  newObj = [];
  for (i of x) {
    let temp = { lat: i[1], lng: i[0] };
    newObj.push(temp);
  }
  console.log(`Processed polygon, ${x.length} edges.`);
  return newObj;
}

//=========================Drawing on Maps==============================
function initMap(pos) {
  const adminBldg = { lat: 33.12443425433204, lng: -96.79647875401061 };

  if (pos) {
    loc = pos;
  } else {
    loc = adminBldg;
  }

  // The location of FISD Admin
  // The map, centered at FISD Admin
  const map = new google.maps.Map(document.getElementById("map"), {
    zoom: 12,
    center: loc,
    mapTypeId: "terrain",
  });

  // The marker, positioned at FISD Admin
  const marker = new google.maps.Marker({
    position: loc,
    map: map,
  });

  let border1 = nestedArrayToObjects(friscoIsdLine);
  let border2 = nestedArrayToObjects(friscoCityLine);
  let border3 = nestedArrayToObjects(collinCountyLine);
  let border4 = nestedArrayToObjects(dentonCountyLine);

  const districtBorder = new google.maps.Polyline({
    path: border1,
    geodesic: true,
    strokeColor: "#FF7700",
    strokeOpacity: 1.0,
    strokeWeight: 2,
  });

  const cityBorder = new google.maps.Polyline({
    path: border2,
    geodesic: true,
    strokeColor: "#FF0000",
    strokeOpacity: 1.0,
    strokeWeight: 2,
  });

  const collinBorder = new google.maps.Polyline({
    path: border3,
    geodesic: true,
    strokeColor: "#0000FF",
    strokeOpacity: 1.0,
    strokeWeight: 2,
  });

  const dentonBorder = new google.maps.Polyline({
    path: border4,
    geodesic: true,
    strokeColor: "#FF00FF",
    strokeOpacity: 1.0,
    strokeWeight: 2,
  });

  districtBorder.setMap(map);
  cityBorder.setMap(map);
  collinBorder.setMap(map);
  dentonBorder.setMap(map);
}
// ========================Actual Polygon Logic========================

const onLine = (l1, p) => {
  if (
    p[0] <= Math.max(l1[0][0], l1[1][0]) &&
    p[0] >= Math.min(l1[0][0], l1[1][0]) &&
    p[1] <= Math.max(l1[0][1], l1[1][1]) &&
    p[1] >= Math.min(l1[0][1], l1[1][1])
  ) {
    return true;
  } else return false;
};

const direction = (a, b, c) => {
  let val = (b[1] - a[1]) * (c[0] - b[0]) - (b[0] - a[0]) * (c[1] - b[1]);
  if (val == 0)
    // Colinear
    return 0;
  else if (val < 0)
    // Anti-clockwise direction
    return 2;
  // Clockwise direction
  return 1;
};

const isIntersect = (l1, l2) => {
  let dir1 = direction(l1[0], l1[1], l2[0]);
  let dir2 = direction(l1[0], l1[1], l2[1]);
  let dir3 = direction(l2[0], l2[1], l1[0]);
  let dir4 = direction(l2[0], l2[1], l1[1]);

  // When intersecting
  if (dir1 != dir2 && dir3 != dir4) return true;
  // When p2 of line2 are on the line1
  if (dir1 == 0 && onLine(l1, l2[0])) return true;
  // When p1 of line2 are on the line1
  if (dir2 == 0 && onLine(l1, l2[1])) return true;
  // When p2 of line1 are on the line2
  if (dir3 == 0 && onLine(l2, l2[0])) return true;
  // When p1 of line1 are on the line2
  if (dir4 == 0 && onLine(l2, l1[1])) return true;
  return false;
};

const checkInside = (poly, p) => {
  // When polygon has less than 3 edge, it is not polygon
  let n = poly.length;
  if (n < 3) return false;

  // Create a point at infinity, y is same as point p
  const exline = [p, [9999, p[1]]];
  let count = 0;
  let i = 0;
  do {
    // Forming a line from two consecutive points of
    // poly
    const side = [poly[i], poly[(i + 1) % n]];
    if (isIntersect(side, exline)) {
      // If side is intersects exline
      if (direction(side[0], p, side[1]) == 0) return onLine(side, p);
      count++;
    }
    i = (i + 1) % n;
  } while (i != 0);

  // When count is odd
  return count & 1;
};
